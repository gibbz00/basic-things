name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
jobs:
{%- if include_precommit %}
  pre-commit:
    name: Validate `pre-commit` Hooks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
    - name: Get python
      uses: actions/setup-python@v5
    - name: Run pre-commit check
      uses: pre-commit/action@v3.0.1
      with:
        extra_args: --all-files --hook-stage manual
{%- endif %}
  conventional_commits:
    name: Conventional Commit Checking
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
      - name: Assert conventional commit usage
        uses: oknozor/cocogitto-action@v3
  spelling:
    name: Spell Checking
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
    - name: typos
      uses: crate-ci/typos@master
  lychee_links:
    name: Broken URL Checking
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Run lychee
        uses: lycheeverse/lychee-action@v2.1.0
        with:
          fail: true
  taplo_checks:
    name: TOML Validation
    runs-on: ubuntu-latest
    container:
      image: tamasfe/taplo:0.8.0
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: taplo lint
        run: taplo lint
      - name: taplo fmt
        run: taplo fmt --check --diff
  cargo_fmt:
    name: Format Checking
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Build setup
        uses: ./.github/actions/build_setup
      - name: cargo fmt
        run: cargo fmt --all -- --check
  clippy:
    name: Lint Checking
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Build setup
        uses: ./.github/actions/build_setup
      - name: Run clippy
        run: cargo clippy --all-features --tests -- -D warnings
  docs_validation:
    name: Developer Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Build setup
        uses: ./.github/actions/build_setup
      - name: Run cargo doc
        env:
          RUSTDOCFLAGS: "-D warnings"
        run: cargo doc --no-deps --all-features
  audit:
    name: Dependency Auditing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@cargo-deny
      - name: Vulnerability scanning
        run: cargo deny check advisories
  unused:
    name: Unused Dependencies Checking
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Build setup
        uses: ./.github/actions/build_setup
      - name: Run cargo-udeps
        uses: aig787/cargo-udeps-action@v1
        with:
          args: --all-features
  cargo_test:
    name: Execute Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Build setup
        uses: ./.github/actions/build_setup
      - name: Run tests
        run: cargo test --all-features -- --include-ignored --nocapture
{%- if include_mdbook %}
  mdbook_validation:
    name: User Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Build setup
        uses: ./.github/actions/build_setup
      - name: mdBook setup
        uses: peaceiris/actions-mdbook@v2
        with:
          mdbook-version: 'latest'
      - name: Run mdbook test
        run: mdbook test
{%- endif %}
{%- if include_codecov %}
  coverage:
    name: Report Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Build setup
        uses: ./.github/actions/build_setup
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          {% raw -%}
          token: ${{ secrets.CODECOV_TOKEN }}
          {%- endraw %}
          files: lcov.info
          fail_ci_if_error: true
{%- endif %}
